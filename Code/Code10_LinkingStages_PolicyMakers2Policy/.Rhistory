install.packages("openssl")
install.packages(c("tidyverse","Rcpp","rstan","devtools","amen"))
install.packages("roxygen")
install.packages("roxygen2")
q()
install.packages("pscl")
library(pscl)
?pscl::absentee
install.packages("Rvoteview")
devtools::install_github("voteview/Rvoteview")
?Rvoteview::voteview_download
install.packages("tcltk")
install.packages("tcltk2")
install.packages("tapiR")
install.packages("coda")
library(network)
?network::network
kstar <- function(mat, ...) {
d <- summary(network(as.matrix(mat), directed = FALSE) ~ kstar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "k-star"
return(d)
}
m <- matrix(rbinom(25,1,.4),5,5)
diag(m) <- 0
test <- kstar(m)
test
test[1]
test[2]
test[3]
istar <- function(mat, ...) {
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
m <- matrix(rbinom(2500,1,.4),50,50)
diag(m) <- 0
test <- istar(m)
test
m
summary(network(as.matrix(m), directed = TRUE)
)
test <- summary(network(as.matrix(mat), directed = TRUE))
test <- summary(network(as.matrix(m), directed = TRUE))
names(test)
?summary.network
install.packages("ergm")
library(amen)
library(ergm)
library(network)
test <- istar(m)
test
test <- summary(network(as.matrix(m), directed=TRUE))
names(test)
test <- summary(network(as.matrix(m), directed=TRUE) ~ 2)
?ergm::"~"
?ergm:::"~"
?network:::"~"
?network::"~"
?"~"
istar <- function(mat, ...) {
print(d)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
m <- matrix(rbinom(25,1,.4),5,5)
diag(m) <- 0
test <- summary(network(as.matrix(m), directed=TRUE))
test <- istar(m)
istar <- function(mat, ...) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
test <- istar(m)
debug(istar)
test <- istar(m)
nrow(mat)
istar(0:(nrow(mat)) - 1)
d
# GOF function for computing the incoming k-star distribution
istar <- function(mat) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
test <- istar(m)
test
debug(istar)
test <- istar(m)
nrow(mat)
istar(0:(nrow(mat) - 1))
network(as.matrix(mat), directed = TRUE)
mat
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
0:(nrow(mat)
- 1))
0:(nrow(mat) - 1)
nrow(mat)
network(as.matrix(mat), directed=TRUE)
istar <- function(mat, ...) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
mat <- m
network(as.matrix(mat), directed = TRUE)
network(as.matrix(mat), directed = TRUE) ~
1
summary(network(as.matrix(mat), directed = TRUE) ~ 1)
summary(network(as.matrix(mat), directed = TRUE) ~ istar)
?ergm:::istar
summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:3))
library(devtools)
install.packages("StanHeaders", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
grepl("^darwin", R.version$os) && grepl("clang4", get_CXX())
grepl("^darwin", R.version$os) && grepl("clang4", rstan:::get_CXX())
rstan:::get_CXX()
Sys.which("install_name_tool"
)
grepl("^darwin", R.version$os)
rstan:::get_CXX(FALSE)
install.packages("inline", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
install.packages("inline", repos = "https://cloud.r-project.org/", dependencies = TRUE, type = "source")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
########################
# Models for Ch 9:
# Policy-makers to
# Policies.
########################
#library(rstanarm)
library(lme4)
library(texreg)
library(doMC)
library(tidyverse)
library(AUC)
registerDoMC(12)
setwd("~/Dropbox/ChainBook/Code/Code9_LinkingStages_PolicyMakers2Policy/")
set.seed(831213)
## Helper functions
bootWrap <- function(.model,.newdata){
pred_fun <- function(.) {
predict(., newdata=.newdata, allow.new.levels=TRUE, type="response")
}
bootpred <- lme4::bootMer(.model, pred_fun, nsim=250, use.u=TRUE, type="parametric",parallel = "multicore",ncpus=12)
data.frame(pred = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
LB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.1, na.rm=TRUE))),
UB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.9, na.rm=TRUE)))
)
}
## Import data
pow_pref_pol <- read.csv("../../Datasets/FinishedOutput/PowersPrefPolicies.csv")
pow_pref_pol$LaggedWinCongConst <- with(pow_pref_pol, ave(winset_cong_c_B, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$LaggedWinCongSpline <- with(pow_pref_pol, ave(winset_cong_s_B, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$ImprovedWinCongConst <- with(pow_pref_pol, (LaggedWinCongConst < winset_cong_c_B) | ((LaggedWinCongConst==1) & (winset_cong_c_B==1)))
pow_pref_pol$ImprovedWinCongSpline <- with(pow_pref_pol, (LaggedWinCongSpline < winset_cong_s_B) | ((LaggedWinCongSpline==1) & (winset_cong_s_B==1)))
pow_pref_pol$LaggedMOCongConst <- with(pow_pref_pol, ave(mo_cong_c_L, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$LaggedMOCongSpline <- with(pow_pref_pol, ave(mo_cong_s_L, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$ImprovedMOCongConst <- with(pow_pref_pol, LaggedMOCongConst < mo_cong_c_L)
pow_pref_pol$ImprovedMOCongSpline <- with(pow_pref_pol, LaggedMOCongSpline < mo_cong_s_L)
source('~/Dropbox/ChainBook/Code/Code9_LinkingStages_PolicyMakers2Policy/Analysis.R', echo=TRUE)
########################
# Models for Ch 9:
# Policy-makers to
# Policies.
########################
#library(rstanarm)
library(lme4)
library(texreg)
library(doMC)
library(tidyverse)
library(AUC)
registerDoMC(12)
setwd("~/Dropbox/ChainBook/Code/Code9_LinkingStages_PolicyMakers2Policy/")
set.seed(831213)
## Helper functions
bootWrap <- function(.model,.newdata){
pred_fun <- function(.) {
predict(., newdata=.newdata, allow.new.levels=TRUE, type="response")
}
bootpred <- lme4::bootMer(.model, pred_fun, nsim=250, use.u=TRUE, type="parametric",parallel = "multicore",ncpus=12)
data.frame(pred = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
LB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.1, na.rm=TRUE))),
UB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.9, na.rm=TRUE)))
)
}
## Import data
pow_pref_pol <- read.csv("../../Datasets/FinishedOutput/PowersPrefPolicies.csv")
pow_pref_pol$LaggedWinCongConst <- with(pow_pref_pol, ave(winset_cong_c_B, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$LaggedWinCongSpline <- with(pow_pref_pol, ave(winset_cong_s_B, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$ImprovedWinCongConst <- with(pow_pref_pol, (LaggedWinCongConst < winset_cong_c_B) | ((LaggedWinCongConst==1) & (winset_cong_c_B==1)))
pow_pref_pol$ImprovedWinCongSpline <- with(pow_pref_pol, (LaggedWinCongSpline < winset_cong_s_B) | ((LaggedWinCongSpline==1) & (winset_cong_s_B==1)))
pow_pref_pol$LaggedMOCongConst <- with(pow_pref_pol, ave(mo_cong_c_L, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$LaggedMOCongSpline <- with(pow_pref_pol, ave(mo_cong_s_L, country, type, FUN=function(x)c(NA, x[-length(x)])))
pow_pref_pol$ImprovedMOCongConst <- with(pow_pref_pol, LaggedMOCongConst < mo_cong_c_L)
pow_pref_pol$ImprovedMOCongSpline <- with(pow_pref_pol, LaggedMOCongSpline < mo_cong_s_L)
## Observed levels of congruence
coll_pref_pol <- pow_pref_pol %>%
#group_by(country, ProcessCollapsed) %>%
group_by(country, ProcessNumberAll) %>%
summarize("Congruence: Winset_Both" = mean(winset_cong_s_B, na.rm=TRUE),
"Congruence: Distribution-to-Policy_Legislature" = mean(mo_cong_s_L,na.rm=TRUE)) %>%
gather(var, val, c("Congruence: Winset_Both","Congruence: Distribution-to-Policy_Legislature"))%>%
separate(var, into=c("Measure","Branch"), sep="_")
pow_pref_pol$SameDirChangeLeg_s <- with(pow_pref_pol, sign(ChangePolicy*ChangeLPrefSpline)>0)
pow_pref_pol$SameDirChangeExec_s <- with(pow_pref_pol, sign(ChangePolicy*ChangeEPrefSpline)>0)
pow_pref_long <- pow_pref_pol %>%
dplyr::select(country,
year,
Resp_Legislature = SameDirChangeLeg_s,
Resp_Executive = SameDirChangeExec_s,
gdp2y,
infl2y,
unemp2y,
ExecParty_pref_const,
MedianParty_pref_const,
ExecParty_pref_spline,
MedianParty_pref_spline,
ImprovedWinCongConst,
ImprovedWinCongSpline,
ImprovedMOCongConst,
ImprovedMOCongSpline,
#ProcessCollapsed,
ProcessNumberAll,
dist_const,
dist_spline) %>%
gather(Variable, SameDir, c("Resp_Legislature", "Resp_Executive")) %>%
separate(Variable, into = c("Variable","Branch"))
pow_pref_long_1st <- subset(pow_pref_long, !duplicated(pow_pref_long[,c("country", "dist_const","Branch")]))
round(prop.table(xtabs(~ImprovedWinCongConst + SameDir, data=pow_pref_long)), 2)
round(prop.table(xtabs(~ImprovedWinCongSpline + SameDir, data=pow_pref_long)), 2)
