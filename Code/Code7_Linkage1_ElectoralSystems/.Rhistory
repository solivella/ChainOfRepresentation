install.packages("openssl")
install.packages(c("tidyverse","Rcpp","rstan","devtools","amen"))
install.packages("roxygen")
install.packages("roxygen2")
q()
install.packages("pscl")
library(pscl)
?pscl::absentee
install.packages("Rvoteview")
devtools::install_github("voteview/Rvoteview")
?Rvoteview::voteview_download
install.packages("tcltk")
install.packages("tcltk2")
install.packages("tapiR")
install.packages("coda")
library(network)
?network::network
kstar <- function(mat, ...) {
d <- summary(network(as.matrix(mat), directed = FALSE) ~ kstar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "k-star"
return(d)
}
m <- matrix(rbinom(25,1,.4),5,5)
diag(m) <- 0
test <- kstar(m)
test
test[1]
test[2]
test[3]
istar <- function(mat, ...) {
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
m <- matrix(rbinom(2500,1,.4),50,50)
diag(m) <- 0
test <- istar(m)
test
m
summary(network(as.matrix(m), directed = TRUE)
)
test <- summary(network(as.matrix(mat), directed = TRUE))
test <- summary(network(as.matrix(m), directed = TRUE))
names(test)
?summary.network
install.packages("ergm")
library(amen)
library(ergm)
library(network)
test <- istar(m)
test
test <- summary(network(as.matrix(m), directed=TRUE))
names(test)
test <- summary(network(as.matrix(m), directed=TRUE) ~ 2)
?ergm::"~"
?ergm:::"~"
?network:::"~"
?network::"~"
?"~"
istar <- function(mat, ...) {
print(d)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
m <- matrix(rbinom(25,1,.4),5,5)
diag(m) <- 0
test <- summary(network(as.matrix(m), directed=TRUE))
test <- istar(m)
istar <- function(mat, ...) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
test <- istar(m)
debug(istar)
test <- istar(m)
nrow(mat)
istar(0:(nrow(mat)) - 1)
d
# GOF function for computing the incoming k-star distribution
istar <- function(mat) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
test <- istar(m)
test
debug(istar)
test <- istar(m)
nrow(mat)
istar(0:(nrow(mat) - 1))
network(as.matrix(mat), directed = TRUE)
mat
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
0:(nrow(mat)
- 1))
0:(nrow(mat) - 1)
nrow(mat)
network(as.matrix(mat), directed=TRUE)
istar <- function(mat, ...) {
print(mat)
d <- summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:(nrow(mat)
- 1)))
names(d) <- 0:(length(d) - 1)
attributes(d)$label <- "Incoming k-star"
return(d)
}
mat <- m
network(as.matrix(mat), directed = TRUE)
network(as.matrix(mat), directed = TRUE) ~
1
summary(network(as.matrix(mat), directed = TRUE) ~ 1)
summary(network(as.matrix(mat), directed = TRUE) ~ istar)
?ergm:::istar
summary(network(as.matrix(mat), directed = TRUE) ~ istar(0:3))
library(devtools)
install.packages("StanHeaders", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
grepl("^darwin", R.version$os) && grepl("clang4", get_CXX())
grepl("^darwin", R.version$os) && grepl("clang4", rstan:::get_CXX())
rstan:::get_CXX()
Sys.which("install_name_tool"
)
grepl("^darwin", R.version$os)
rstan:::get_CXX(FALSE)
install.packages("inline", repos = "https://cloud.r-project.org/", dependencies=TRUE, type="source")
install.packages("inline", repos = "https://cloud.r-project.org/", dependencies = TRUE, type = "source")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
rstan:::rstudio_stanc("Dropbox/Paper Salamanca/Code/BivariateMcGann.stan")
library(plyr)
library(Rcpp)
library(doMC)
library(rpart)
library(caret)
library(tidyverse)
weighted.quantile <- function(x, w, probs=seq(0,1,0.25), na.rm=TRUE) {
x <- as.numeric(as.vector(x))
w <- as.numeric(as.vector(w))
if(anyNA(x) || anyNA(w)) {
ok <- !(is.na(x) | is.na(w))
x <- x[ok]
w <- w[ok]
}
stopifnot(all(w >= 0))
if(all(w == 0)) stop("All weights are zero", call.=FALSE)
#'
oo <- order(x)
x <- x[oo]
w <- w[oo]
Fx <- cumsum(w)/sum(w)
#'
result <- numeric(length(probs))
for(i in seq_along(result)) {
p <- probs[i]
lefties <- which(Fx <= p)
if(length(lefties) == 0) {
result[i] <- x[1]
} else {
left <- max(lefties)
result[i] <- x[left]
if(Fx[left] < p && left < length(x)) {
right <- left+1
y <- x[left] + (x[right]-x[left]) * (p-Fx[left])/(Fx[right]-Fx[left])
if(is.finite(y)) result[i] <- y
}
}
}
names(result) <- paste0(format(100 * probs, trim = TRUE), "%")
return(result)
}
weighted.median <- function(x, w, na.rm=TRUE) {
unname(weighted.quantile(x, probs=0.5, w=w, na.rm=na.rm))
}
setwd("~/Dropbox/ChainBook/Code/Code6_Linkage1_ElectoralSystems/")
load("SimulationResultsFUllChain.RData")
hyp.data.full.long <- hyp.data.full %>%
gather(Variable, val, mo_cong_cpl:resp_pe)
##Citizen to PM
#Congruence
hyp.data.full.long.cpm_cong <- hyp.data.full.long %>%
filter(Variable %in% c("mm_cong_cpl", "mo_cong_cpl", "oo_cong_cpl", "mo_cong_cpp","oo_cong_cpp")) %>%
mutate(Variable = case_when(Variable=="mm_cong_cpl" ~ "Distribution-to-Distribution_Legislature",
Variable=="mo_cong_cpl" ~ "Distribution-to-Median_Legislature",
Variable=="oo_cong_cpl" ~ "Median-to-Median_Legislature",
Variable=='mo_cong_cpp' ~ "Distribution-to-Median_Executive",
Variable=="oo_cong_cpp" ~ "Median-to-Median_Executive"
)) %>%
separate(Variable, c("Measure", "Branch"), sep = "_") %>%
droplevels()
ggplot(hyp.data.full.long.cpm_cong, aes(x=Measure, y = val)) +
facet_grid(~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("Congruence Measure") +
ylab("")+
theme_bw()
#Responsiveness
hyp.data.full.long.cpm_resp <- hyp.data.full.long %>%
filter(Variable %in% c("resp_lc", "resp_ec")) %>%
mutate(Branch = case_when(Variable=="resp_lc" ~ "Responsiveness: Legislature",
Variable=="resp_ec" ~ "Responsiveness: Executive"
)) %>%
droplevels()
ggplot(hyp.data.full.long.cpm_resp, aes(x=Branch, y = val)) +
geom_boxplot(outlier.color = NA) +
ylab("Probability of moving in same direction") +
xlab("")+
theme_bw()
##PM to policy
#Congruence
hyp.data.full.long.pmp_cong <- hyp.data.full.long %>%
filter(Variable %in% c("mo_cong_lp", "winset_cong")) %>%
mutate(Variable = case_when(Variable=="mo_cong_lp" ~ "Congruence: Distribution-to-Policy_Legislature",
Variable=="winset_cong" ~ "Congruence: Winset_Both"
)) %>%
separate(Variable, c("Measure", "Branch"), sep = "_") %>%
droplevels()
ggplot(hyp.data.full.long.pmp_cong, aes(x=Measure, y = val)) +
facet_grid(~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("") +
ylab("")+
ylim(c(0,1))+
theme_bw()
#Responsiveness
hyp.data.full.long.pmp_resp <- hyp.data.full.long %>%
filter(Variable %in% c("resp_pl", "resp_pe")) %>%
mutate(Branch = case_when(Variable=="resp_pl" ~ "Legislature",
Variable=="resp_pe" ~ "Executive"
)) %>%
droplevels()
ggplot(hyp.data.full.long.pmp_resp, aes(x=Branch, y = val)) +
geom_boxplot(outlier.color = NA) +
ylab("Probability of policy moving in same direction") +
xlab("")+
theme_bw()+
ylim(c(0.2, 1.0))
##Citizen to policy
#Congruence
hyp.data.full.long.cp_cong <- hyp.data.full.long %>%
filter(Variable %in% c("mo_cong_cp", "oo_cong_cp","resp_pc")) %>%
mutate(Variable = case_when(Variable=="mo_cong_cp" ~ "Congruence: Distribution-to-Policy",
Variable=="oo_cong_cp" ~ "Congruence: Median-to-Policy",
Variable=="resp_pc" ~ "Simulated Responsiveness"
)) %>%
droplevels()
ggplot(subset(hyp.data.full.long.cp_cong, Variable!="Simulated Responsiveness"), aes(x=Variable, y = val)) +
geom_boxplot() +
xlab("") +
ylab("")+
theme_bw()
ggplot(subset(hyp.data.full.long.cp_cong, Variable!="Simulated Responsiveness"), aes(x=Variable, y = val)) +
geom_boxplot(outlier.colour = NA) +
xlab("") +
ylab("")+
theme_bw()
ggplot(subset(hyp.data.full.long.cp_cong, Variable=="Simulated Responsiveness"), aes(x=Variable, y = val)) +
geom_boxplot(outlier.color = NA) +
xlab("") +
ylab("")+
#ylim(c(0.27, 0.65))+
theme_bw()
