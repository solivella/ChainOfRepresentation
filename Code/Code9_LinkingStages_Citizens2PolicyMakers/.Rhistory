samp1 <- rnorm(1000, mean[1], sd[1])
samp2 <- rnorm(1000, mean[2], sd[2])
1-ks.test(samp1,samp2)$statistic
}
mo_cong <- function(mean,sd){
if(any(is.na(c(mean))))
return(NA)
samps <- rnorm(1500,mean[2],sd)
sum((samps-mean[2])^2)/sum((samps-mean[1])^2)
}
## Import new moods
setwd("~/Dropbox/ChainBook/Code/Code8_LinkingStages_Citizens2PolicyMakers//")
AllMoods <- read.csv("../../Datasets/FinishedOutput/AllMoodsFinal.csv")
AllMoods1990 <- read.csv("../../Datasets/FinishedOutput/AllMoodsFinal1990.csv")
test90 <- subset(AllMoods, year >= 1990)
head(test90)
table(test90$type)
test90 <- subset(test90, type=="President")
AllMoods1990 <- read.csv("../../Datasets/FinishedOutput/AllMoodsFinal1990.csv")
test90_2 <- subset(AllMoods1990, type=="President")
head(test90_2)
dim(test90_2)
dim(test90)
dim(AllMoods)
dim(AllMoods1990)
test90 <- subset(AllMoods, year >= 1990)
dim(AllMoods)
dim(test90)
#############################
# Models for Ch. 8: Linking
# Stages: Citizens to Policy
# Makers.
#############################
library(lme4)
library(ggplot2)
library(wesanderson)
library(gridExtra)
library(texreg)
library(tidyverse)
library(doMC)
library(xtable)
library(AUC)
registerDoMC(12)
## Import data
setwd("~/Dropbox/ChainBook/Code/Code8_LinkingStages_Citizens2PolicyMakers/")
cit_pm_long <- read.csv("../../Datasets/FinishedOutput/FullDataLong.csv")
cit_pm_long$Branch <- c(Legislator="Lower House", Senator="Upper House", President="Executive")[as.character(cit_pm_long$type)]
cit_pm_long$IsExec <-cit_pm_long$Branch=="Executive"
cit_pm_long$SameDir <- with(cit_pm_long,sign(ChangeMoodSpline*lag_ChangeCitMood)>0)
## Helper functions
bootWrap <- function(.model,.newdata){
pred_fun <- function(.) {
predict(., newdata=.newdata, allow.new.levels=TRUE, type="response")
}
bootpred <- lme4::bootMer(.model, pred_fun, nsim=250, use.u=TRUE, type="parametric", parallel = "multicore",ncpus=12)
data.frame(pred = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
LB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.1, na.rm=TRUE))),
UB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.9, na.rm=TRUE)))
)
}
##Example code to get cases for examples
cit_pm_wide <- cit_pm_long %>%
dplyr::select(country, year, type, group, cong=oo_cong_spline) %>%
gather(var, val,  group, cong) %>%
unite(tmp, type, var, sep="_") %>%
spread(tmp, val=val) %>%
mutate(avgcong = rowMeans(.[,c(3,5,7)], na.rm=TRUE)) %>%
dplyr::select(country, year,avgcong,
Legislator=Legislator_group, President = President_group, Senator = Senator_group)
cit_pm_wide %>%
#filter(Legislator%in%c(1,5)  & (is.na(Senator)|Senator%in%c(1,5)) & President==6)%>%
filter(Legislator%in%c(2:4)  & (is.na(Senator)|Senator%in%c(2:4)) & President==4)%>%
group_by(country) %>%
summarize(mean(avgcong,na.rm=TRUE), sd(avgcong,na.rm=TRUE))
## Summary stats
# Congruence
pdf("../../BookManuscript/Graphs/ObsCongCitPM.pdf", width=10, height=3.5)
ggplot(cit_pm_long %>%
dplyr::select(Branch,mm_cong_spline:mo_cong_const) %>%
gather(Measure, val,mm_cong_spline:mo_cong_const) %>%
mutate(Measure=recode(Measure, "oo_cong_spline" = "Median-to-Median_Evolving",
"oo_cong_const" = "Median-to-Median_Constant",
"mo_cong_spline" = "Distribution-to-Median_Evolving",
"mo_cong_const" = "Distribution-to-Median_Constant",
"mm_cong_spline" = "Distribution-to-Distribution_Evolving",
"mm_cong_const" = "Distribution-to-Distribution_Constant"))%>%
separate(Measure, into=c("Measure", "Interpolation"), sep="_")%>%
filter(!(Branch=="Executive"&Measure=="Distribution-to-Distribution"))%>%
droplevels(),
aes(x=Measure, y = val)) +
facet_grid(Interpolation~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("Congruence Measure") +
ylab("")+
theme_bw()
dev.off()
# Responsiveness
cit_pm_long %>%
group_by(Branch) %>%
summarize(MeanResp=mean(SameDir, na.rm=TRUE))
## Model estimation
##Congruence
##Median-to-median
cong_model_oo_spline <- lmer(oo_cong_spline ~
+ CitizenHet
+ infl2y
+ unemp2y
+ gdp2y
+ exec_party_spline
+ median_party_spline
+  group
+I(group^2)
#+ IsExec
+ Branch
+ (1 | group)
#+ (1 | year)
#+(1|country)
, data = cit_pm_long)
summary(cong_model_oo_spline)
dim(cit_pm_long)
#####################################################################
# basicspacePELA.R
# SO: December 29, 2014
# INPUT: PELAIndividualResponses.RData
# OUTPUT: basicspacePELA.RData
# This file reads individual-level issue scales from PELA
# then estimates a common basic space for Latin American legislators
#####################################################################
library(basicspace)
library(plyr)
library(stringr)
library(gtools)
library(fields)
#################################################################
#### Load dataset with multiply-imputed legislator responses ####
#################################################################
load("~/Dropbox/ChainBook/Datasets/OriginalDataFiles/PELAIndividualResponsesMI.RData")
#############################################
#### Questions used for Blackbox scaling ####
#############################################
vars2get <- c("state.not.solves.problems"
,"state.not.reduce.inequality"
,"state.limited.scope"
,"economy.best.in.private.sector"
,"state.not.in.price.control"
,"state.not.in.primsec.edu"
,"state.not.in.housing"
,"state.not.in.job.creation"
,"state.not.in.pensions"
,"state.not.in.high.edu"
,"state.not.in.unemployment"
,"state.not.in.basic.needs"
,"privatization.beneficial"
,"state.not.in.sanitation"
,"market.best")
Aggr.Data.Sal <- LegMI
####################################
#### Correct Peru party weights ####
####################################
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="UPP"] <- 0.375/0.3523
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="PAP"] <- 0.3/0.2727
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="AF"] <- 0.108333333/0.1477
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="PPC"] <- 0.016666667/0.09659
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="UN"] <- 0.141666667/0.0625
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="FC"] <- 0.041666667/0.02273
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="PNP"] <- 0.008333333/0.04545
Aggr.Data.Sal$weight[Aggr.Data.Sal$pais=="Peru"
& Aggr.Data.Sal$year==2006
& Aggr.Data.Sal$PartyAcronym=="Other"] <- 0.008333333/0.04545
################################
#### Blackbox decomposition ####
################################
LegRoll <- Aggr.Data.Sal[,vars2get]
result <- blackbox (as.matrix(LegRoll)
, dims=1
, minscale=1
, verbose=TRUE) #Extremely fast
summary(result)
Aggr.Data.Sal$pais <- gsub("\\s","",Aggr.Data.Sal$pais)
result$individuals[[1]]$paisYear <- with(Aggr.Data.Sal,paste(pais,year,sep=""))
result$individuals[[1]]$PartyCode <- Aggr.Data.Sal$PartyCode
result$individuals[[1]]$PartyAcronym <- Aggr.Data.Sal$PartyAcronym
result$individuals[[1]]$SelfIdeol <- Aggr.Data.Sal$LR.ideology.self
result$individuals[[1]]$PresIdeol <- Aggr.Data.Sal$LR.ideology.prez1
result$individuals[[1]]$Seat.ShareLH <- Aggr.Data.Sal$Seat.ShareLH
result$individuals[[1]]$weights <- Aggr.Data.Sal$weight
result$individuals[[1]]$Term <- Aggr.Data.Sal$Term
#result$individuals[[1]]$c1 <- result$individuals[[1]]$c1*-1
result$individuals[[1]]$weightedMood <- result$individuals[[1]]$weights * (result$individuals[[1]]$c1 * (-1))
length(unique(results$individuals[[1]][,c("country", "year")]))
length(unique(result$individuals[[1]][,c("country", "year")]))
names(result$individuals[[1]])
length(unique(result$individuals[[1]][,c("paisYear")]))
result$individuals[[1]]  <-  result$individuals[[1]][complete.cases(result$individuals[[1]]),]
length(unique(result$individuals[[1]][,c("paisYear")]))
512 - 492
75 - 57
table(cit_pm_long$country)
library(car)
library (reshape)
library(plyr)
library (dplyr)
ks_cong <- function(mean,sd){
if(any(is.na(c(mean))))
return(NA)
samp1 <- rnorm(1000, mean[1], sd[1])
samp2 <- rnorm(1000, mean[2], sd[2])
1-ks.test(samp1,samp2)$statistic
}
mo_cong <- function(mean,sd){
if(any(is.na(c(mean))))
return(NA)
samps <- rnorm(1500,mean[2],sd)
sum((samps-mean[2])^2)/sum((samps-mean[1])^2)
}
## Import new moods
setwd("~/Dropbox/ChainBook/Code/Code8_LinkingStages_Citizens2PolicyMakers//")
AllMoods <- read.csv("../../Datasets/FinishedOutput/AllMoodsFinal.csv")
AllMoods1990 <- read.csv("../../Datasets/FinishedOutput/AllMoodsFinal1990.csv")
AllMoods <- AllMoods1990 %>%
dplyr::select(type, country, year, mood1990=mood, Heterogeneity1990=Heterogeneity)
##Import party data
PartyData <- read.table("../../Datasets/FinishedOutput/allMedianMoods.txt",
header = TRUE,
sep="\t")
AllMoods <- PartyData %>%
dplyr::select(country, year, legislative.median, prez.party.mood, median.party.mood) %>%
dplyr::mutate(country=dplyr::recode(country,"Brasil"="Brazil",
"RepublicaDominicana"="DominicanRep")) %>%
dplyr::right_join(AllMoods)
AllMoods <- subset(AllMoods, type != "Policy")
Moods.stack <- subset(AllMoods, type != "Citizen")
##Interpolation
Moods.stack <- ddply(Moods.stack, c("country","type"),
function(x){
num <- diff(range(x$year))
moods_s <- spline(x$year,x$mood1990, num+1)
if(all(is.na(x$prez.party.mood))){
e_mood_s <- e_mood_c <- list()
e_mood_s$y <- e_mood_c$y <- rep(NA, num+1)
} else {
e_mood_s <- spline(x$year, x$prez.party.mood, num+1)
e_mood_c <- approx(x$year, x$prez.party.mood, method="constant", n=num+1)
}
if(all(is.na(x$median.party.mood))){
party_mood_s <- party_mood_c <- list()
party_mood_s$y <- party_mood_c$y <- rep(NA, num + 1)
} else {
party_mood_s <- spline(x$year, x$median.party.mood, num+1)
party_mood_c <- approx(x$year, x$median.party.mood, method = "constant", n=num+1)
}
hets_s <- spline(x$year,log(x$Heterogeneity1990), num+1)
moods_c <- approx(x$year,x$mood1990,method="constant",n = num+1)
hets_c <- approx(x$year,log(x$Heterogeneity1990), method="constant", n=num+1)
data.frame(year=moods_s$x,type=x$type[1],country=x$country[1],
mood_spline=moods_s$y,Heterogeneity_spline=exp(hets_s$y),
mood_const=moods_c$y,Heterogeneity_const=exp(hets_c$y),
exec_party_spline=e_mood_s$y, median_party_spline = party_mood_s$y,
exec_party_const=e_mood_c$y, median_party_const = party_mood_c$y
)
})
library(lme4)
library(ggplot2)
library(wesanderson)
library(gridExtra)
library(texreg)
library(tidyverse)
library(doMC)
library(xtable)
library(AUC)
registerDoMC(12)
## Import data
setwd("~/Dropbox/ChainBook/Code/Code8_LinkingStages_Citizens2PolicyMakers/")
cit_pm_long <- read.csv("../../Datasets/FinishedOutput/FullDataLong.csv")
cit_pm_long$Branch <- c(Legislator="Lower House", Senator="Upper House", President="Executive")[as.character(cit_pm_long$type)]
cit_pm_long$IsExec <-cit_pm_long$Branch=="Executive"
cit_pm_long$SameDir <- with(cit_pm_long,sign(ChangeMoodSpline*lag_ChangeCitMood)>0)
## Helper functions
bootWrap <- function(.model,.newdata){
pred_fun <- function(.) {
predict(., newdata=.newdata, allow.new.levels=TRUE, type="response")
}
bootpred <- lme4::bootMer(.model, pred_fun, nsim=250, use.u=TRUE, type="parametric", parallel = "multicore",ncpus=12)
data.frame(pred = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
LB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.1, na.rm=TRUE))),
UB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.9, na.rm=TRUE)))
)
}
##Example code to get cases for examples
cit_pm_wide <- cit_pm_long %>%
dplyr::select(country, year, type, group, cong=oo_cong_spline) %>%
gather(var, val,  group, cong) %>%
unite(tmp, type, var, sep="_") %>%
spread(tmp, val=val) %>%
mutate(avgcong = rowMeans(.[,c(3,5,7)], na.rm=TRUE)) %>%
dplyr::select(country, year,avgcong,
Legislator=Legislator_group, President = President_group, Senator = Senator_group)
cit_pm_wide %>%
#filter(Legislator%in%c(1,5)  & (is.na(Senator)|Senator%in%c(1,5)) & President==6)%>%
filter(Legislator%in%c(2:4)  & (is.na(Senator)|Senator%in%c(2:4)) & President==4)%>%
group_by(country) %>%
summarize(mean(avgcong,na.rm=TRUE), sd(avgcong,na.rm=TRUE))
ggplot(cit_pm_long %>%
dplyr::select(Branch,mm_cong_spline:mo_cong_const) %>%
gather(Measure, val,mm_cong_spline:mo_cong_const) %>%
mutate(Measure=recode(Measure, "oo_cong_spline" = "Median-to-Median_Evolving",
"oo_cong_const" = "Median-to-Median_Constant",
"mo_cong_spline" = "Distribution-to-Median_Evolving",
"mo_cong_const" = "Distribution-to-Median_Constant",
"mm_cong_spline" = "Distribution-to-Distribution_Evolving",
"mm_cong_const" = "Distribution-to-Distribution_Constant"))%>%
separate(Measure, into=c("Measure", "Interpolation"), sep="_")%>%
filter(!(Branch=="Executive"&Measure=="Distribution-to-Distribution"))%>%
droplevels(),
aes(x=Measure, y = val)) +
facet_grid(Interpolation~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("Congruence Measure") +
ylab("")+
theme_bw()
ggplot(cit_pm_long %>%
dplyr::select(Branch,mm_cong_spline:mo_cong_const) %>%
gather(Measure, val,mm_cong_spline:mo_cong_const) %>%
mutate(Measure=dplyr::recode(Measure, "oo_cong_spline" = "Median-to-Median_Evolving",
"oo_cong_const" = "Median-to-Median_Constant",
"mo_cong_spline" = "Distribution-to-Median_Evolving",
"mo_cong_const" = "Distribution-to-Median_Constant",
"mm_cong_spline" = "Distribution-to-Distribution_Evolving",
"mm_cong_const" = "Distribution-to-Distribution_Constant"))%>%
separate(Measure, into=c("Measure", "Interpolation"), sep="_")%>%
filter(!(Branch=="Executive"&Measure=="Distribution-to-Distribution"))%>%
droplevels(),
aes(x=Measure, y = val)) +
facet_grid(Interpolation~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("Congruence Measure") +
ylab("")+
theme_bw()
## Summary stats
# Congruence
pdf("../../BookManuscript/Graphs/ObsCongCitPM.pdf", width=10, height=3.5)
ggplot(cit_pm_long %>%
dplyr::select(Branch,mm_cong_spline:mo_cong_const) %>%
gather(Measure, val,mm_cong_spline:mo_cong_const) %>%
mutate(Measure=dplyr::recode(Measure, "oo_cong_spline" = "Median-to-Median_Evolving",
"oo_cong_const" = "Median-to-Median_Constant",
"mo_cong_spline" = "Distribution-to-Median_Evolving",
"mo_cong_const" = "Distribution-to-Median_Constant",
"mm_cong_spline" = "Distribution-to-Distribution_Evolving",
"mm_cong_const" = "Distribution-to-Distribution_Constant"))%>%
separate(Measure, into=c("Measure", "Interpolation"), sep="_")%>%
filter(!(Branch=="Executive"&Measure=="Distribution-to-Distribution"))%>%
droplevels(),
aes(x=Measure, y = val)) +
facet_grid(Interpolation~Branch, scales="free_x")+
geom_boxplot(outlier.color = NA) +
xlab("Congruence Measure") +
ylab("")+
theme_bw()
dev.off()
load("~/Dropbox/ChainBook/Code/Code5_Blender/sharedItemParameterData copy.RData")
rm(list=ls())
load("~/Dropbox/ChainBook/Code/Code5_Blender/sharedItemParameterData copy.RData")
ls()
finalDatanet <- finalData
load("~/Dropbox/ChainBook/Code/Code5_Blender/sharedItemParameterData.RData")
ls()
dim(finalData)
dim(finalDatanet)
names(finalDara)
names(finalData)
table(finalData$type)
table(finalDatanet$type)
all(subset(finalData, type=="President")$value == subset(finalDatanet, type=="President")$value)
all(subset(finalData, type=="Citizen")$value == subset(finalDatanet, type=="Citizen")$value)
#############################
# Models for Ch. 10:  Citizens
# to Policy
#############################
library(lme4)
library(ggplot2)
library(texreg)
library(AUC)
library(dplyr)
library(tidyverse)
library(doMC)
registerDoMC(4)
## Helper functions
bootWrap <- function(.model,.newdata){
pred_fun <- function(.) {
predict(., newdata=.newdata, allow.new.levels=TRUE, type="response")
}
bootpred <- lme4::bootMer(.model, pred_fun, nsim=250, use.u=TRUE, type="parametric", parallel = "multicore",ncpus=12)
data.frame(pred = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.5, na.rm=TRUE))),
LB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.1, na.rm=TRUE))),
UB = apply(bootpred$t, 2, function(x) as.numeric(quantile(x, probs=.9, na.rm=TRUE)))
)
}
setwd("~/Dropbox/ChainBook/Code/Code10_Conclusion/")
cit_data <- read.csv("../../Datasets/FinishedOutput/CitPrefESPow.csv")
cit_data$PMP <- cit_data$ProcessCollapsed
cit_data$SenGroup <- replace_na(cit_data$SenGroup,"X")
cit_data$SenGroupNum <- as.numeric(replace(cit_data$SenGroup, cit_data$SenGroup=="X", "0"))
cit_data$InstExec <- as.factor(with(cit_data, paste(PMP,ExecGroup,sep="_")))
cit_data$InstLow <- as.factor(with(cit_data,  paste(PMP,LegGroup,sep="_")))
cit_data$InstUp <- as.factor(with(cit_data,  paste(PMP,SenGroup,sep="_")))
cit_data$Institutions <- as.factor(with(cit_data,  paste(PMP,ExecGroup,LegGroup,replace_na(SenGroup,"X"),sep="_")))
cit_data$sameDirChange <- with(cit_data,sign(ChangePolicy*lag_ChangeCitPref)>0)
#many to one m
mo_cong_model <- lmer(mo_cong ~
+ ExecParty_pref
+ MedianParty_pref
+ gdp2y
+ infl2y
+ unemp2y
+ I(PMP^2)
+ I(LegGroup^2)
+ I(ExecGroup^2)
+ I(SenGroupNum^2)
+ PMP
* LegGroup
+ PMP*ExecGroup
+ PMP*SenGroupNum
#+(1|ExecGroup:LegGroup:SenGroup:PMP)
+(1|PMP)
+ (1|ExecGroup)
+(1|LegGroup)
+(1|SenGroup)
,data = cit_data
, REML = TRUE
, control=lmerControl(optimizer = "bobyqa"))
pred_data_3 <- expand.grid(PMP = c(1:7),
ExecGroup = c(4:6),
LegGroup = c(1:5),
SenGroupNum = c(0:5),
SenGroup = c("1","2","3","4","5","X"),
LEDist = mean(cit_data$LEDist, na.rm=TRUE),
gdp2y = 2.3,
infl2y = -0.3,
unemp2y = 7.4,
ExecParty_pref = mean(cit_data$ExecParty_pref, na.rm=TRUE),
MedianParty_pref = mean(cit_data$MedianParty_pref, na.rm=TRUE))
pred_data_3 <- filter(pred_data_3,(SenGroup == "X" & SenGroupNum == 0) | (SenGroupNum == SenGroup))
pred_data_3 <- pred_data_3 %>%
bind_cols(bootWrap(mo_cong_model, .))%>%
mutate(PMP = paste("PMP", PMP, sep=" ")) %>%
group_by(PMP, LegGroup, SenGroup) %>%
summarize(pred = mean(pred),
UB = mean(UB),
LB = mean(LB)) %>%
ungroup()
pred_data_3_l <- pred_data_3 %>%
group_by(PMP, Group=LegGroup) %>%
summarize(pred = mean(pred),
UB = mean(UB),
LB = mean(LB)) %>%
ungroup()%>%
mutate(Branch="Lower House")
pred_data_3_s <- pred_data_3 %>%
group_by(PMP, Group=SenGroup) %>%
summarize(pred = mean(pred),
UB = mean(UB),
LB = mean(LB)) %>%
ungroup()%>%
filter(Group!="X")%>%
mutate(Branch="Upper House")
pred_data_3 <- rbind(pred_data_3_s, pred_data_3_l)
pdf("../../BookManuscript/Graphs/CongruenceCitPol_DM.pdf", width=7, height=7)
CongruenceCitPol_DM <- ggplot(pred_data_3, aes(x=as.numeric(Group), y=pred, pch=Branch)) +
facet_wrap(~PMP, ncol=2)+
geom_smooth(aes(x=as.numeric(Group)),method = "loess", span=2, se=FALSE,col="gray70")+
geom_point(aes(ymin=LB, ymax=UB), cex=2.7, position=position_dodge(0.3))+
scale_shape_manual(values=c(17,15))+
theme_bw() +
scale_x_continuous("(Weak <--) Electoral System Group (--> Strong)", breaks = 1:5)+
ylab("(Incongruent <--) Marginal Predicted Distribution-to-Policy Congruence (--> Congruent)")
CongruenceCitPol_DM
dev.off()
CongruenceCitPol_DM <- ggplot(pred_data_3, aes(x=as.numeric(Group), y=pred, pch=Branch)) +
facet_wrap(~PMP, ncol=2)+
geom_smooth(aes(x=as.numeric(Group)),method = "loess", span=2, se=FALSE,col="gray70")+
geom_point(aes(ymin=LB, ymax=UB), cex=2.7, position=position_dodge(0.3))+
scale_shape_manual(values=c(17,15))+
theme_bw() +
scale_x_continuous("(Weak <--) Electoral System Group (--> Strong)", breaks = 1:5)+
ylab("(Incongruent <--) Marginal Predicted Distribution-to-Policy Congruence (--> Congruent)")
CongruenceCitPol_DM
pdf("../../BookManuscript/Graphs/CongruenceCitPol_DM.pdf", width=7, height=7)
CongruenceCitPol_DM <- ggplot(pred_data_3, aes(x=as.numeric(Group), y=pred, pch=Branch)) +
facet_wrap(~PMP, ncol=2)+
geom_smooth(aes(x=as.numeric(Group)),method = "loess", span=2, se=FALSE,col="gray70")+
geom_point(aes(ymin=LB, ymax=UB), cex=2.7, position=position_dodge(0.3))+
scale_shape_manual(values=c(17,15))+
theme_bw() +
scale_x_continuous("(Weak <--) Electoral System Group (--> Strong)", breaks = 1:5)+
ylab("(Incongruent <--) Marginal Predicted Distribution-to-Policy Congruence (--> Congruent)")
CongruenceCitPol_DM
dev.off()
