no.surveys <- c()
for (i in 1:length(countryLabels)) {
cntr <- levels (availCountries$Country)[i]
surv <- sort (unique (availCountries$Year[availCountries$Country==cntr]))
no.surveys <- c(no.surveys, length (surv))
points (xy.coords (c(1:length(yearLabels))[is.element (yearLabels, as.numeric(surv))], rep (i, length(surv)))
, pch=19, cex=1, col="black")
}
dev.off()
# Number of surveys per country contained in no.surveys
fivenum (no.surveys)
############################
#### Read in aux info   ####
############################
graphicsPath <- "~/Dropbox/ChainBook/BookManuscript/Graphs/"  # Save copies here as well
# load (file="~/Dropbox/ChainBook/Code/Code4_5_Blender/McGannIRT.RData")
load (file="~/Dropbox/ChainBook/Code/Code4_5_Blender/JointIRT(flexible).RData") # Chains
load("~/Dropbox/ChainBook/Code/Code4_5_Blender/sharedItemParameterData.RData")  # Input for chains
# load (file="~/Dropbox/ChainBook/Datasets/OriginalDataFiles/itemsPerYear.RData")
## Prepare data
finalData$ActorCtyYr <- as.integer(as.factor(with(finalData,
paste(type, country, year))))
finalData <- finalData[order(finalData$ActorCtyYr),]
finalData$QuestionID <- as.integer(as.factor(with(finalData,
paste(country, QuestionName))))
##pm-country-years
pmct <- finalData %>% filter(type!="Government")
##p-country-years
pct1 <- finalData %>%
filter(type=="Government" &
QuestionName %in% c("privatization.beneficial",
"capital.mobility.good")) %>%
mutate_at("value", function(x)case_when(x < 3 ~ 0, TRUE ~ 1))
pct2 <- finalData %>%
filter(type=="Government" &
!(QuestionName %in% c("privatization.beneficial",
"capital.mobility.good")))
# Get type, country, year
actor <- with (finalData, tapply (type, ActorCtyYr, unique))
country <- with (finalData, tapply (country, ActorCtyYr, unique))
year <- with (finalData, tapply (year, ActorCtyYr, unique))
actor.type <- actor[actor != "Government"]
country <- country[actor != "Government"]
year    <- year[actor != "Government"]
########################
# Graph available data #
vars2recode <- vars2recode[!is.element(vars2recode, c("LR.ideology.prez1","LR.ideology.self","PartyCode"))]
jagsDataLeg <- finalData %>% filter(type=="Legislator")
# These graphs go into Chapter ChPoliticianPreferences.tex as "F:availableStimuli"
count.items.available <- items.available <- list()
whichCountry <- whichYear <- countItems <- c()
for (i in 1:length(unique(jagsDataLeg$country))) {
pais <- unique (jagsDataLeg$country)[i]
prettyPais <- car::recode (pais, "'ElSalvador'='El Salvador';
'DominicanRep'='Dominican Republic';
'CostaRica'='Costa Rica'")
tempData <- jagsDataLeg[jagsDataLeg$country==pais,]
# Which issues appear only once
badIssues <- which (table(tempData$q)==1)
tempData <- tempData[!is.element(tempData$q,as.numeric (names (badIssues))),]
surv <- sort (unique (tempData$year))
howManyItems <- yr <- ps <- c()
for (j in 1:length(surv)){
howManyItems <- c(howManyItems, length (tempData$QuestionName[tempData$year==surv[j]]))
yr <- c(yr, surv[j])
ps <- c(ps, pais)
}
whichCountry <- c(whichCountry, ps)
whichYear <- c(whichYear, yr)
countItems <- c(countItems, howManyItems)
pdf (paste(graphPath, "availStimuliLegislators", pais, ".pdf", sep=""), h=9, w=5)
par (mar=c(4,11,2,1), las=2, cex.axis=0.8)
plot (c(1,23), c(1,length(vars2recode)), type="n", axes=F, ylab="", xlab="")
axis (1, at=1:23, labels = 1992:2014)
axis (2, at=1:length(vars2recode), labels = vars2recode, cex=0.9)
par (las=0); mtext (side=3, line=0, at=9.5, prettyPais)
abline (v=1:23, lty=3)
abline (h=1:length(vars2recode), lty=3)
for (j in 1:length(surv)){
whichLabels <- tempData$QuestionName[tempData$year==surv[j]]
whichX <- surv[j]-1991
whichY <- c(1:length(vars2recode))[is.element (vars2recode, whichLabels)]
points (xy.coords(rep(surv[j]-1991, length(whichY)), whichY), pch=19)
}
items.available[[i]] <- vars2recode[is.element (vars2recode, unique (tempData$QuestionName))]
count.items.available[[i]] <- table (tempData$QuestionName)
dev.off()
}
##########################################################################################
# Some descriptive stats about the number of items per legislature
##########################################################################################
data.frame (whichCountry, whichYear, countItems) # print all information
min (countItems) # minimum number of items (6)
whichCountry[which (countItems<6)] # No legislature now with anything less than 6 items
whichCountry[which (countItems==max(countItems))] # Legislatures with 14 items
round (mean (countItems), 2) # average number of items per legislature
##########################################################################################
#######################################################################
#### Presidents: how many weighted percentages close to 100% or 0% ####
#######################################################################
jagsDataPres <- finalData %>% filter(type=="President")
# Read labels for party that holds largest plurality in the country
PartyLabelsData <- read.csv (file="~/Dropbox/ChainBook/Datasets/FinishedOutput/PartyLabelsData.csv"
, header=TRUE)
levels (PartyLabelsData$pais) <- car::recode (levels (PartyLabelsData$pais)
, "'Brasil'='Brazil'
; 'Costa Rica'='CostaRica'
; 'Republica Dominicana'='DominicanRep'
; 'El Salvador'='ElSalvador'")
################################################
#### Get policy moods for all policy-makers ####
################################################
# Load MCMC object
chainsConv <- rstan::As.mcmc.list(common_model)
# chainsConv.sep <- rstan::As.mcmc.list(common_modelMcGann)
# rstan::summary(common_model, "mu")$summary[,"Rhat"]
# Summaries of posterior distribution
Mu <- rbind ( chainsConv[[1]][,grep("mu_a", colnames(chainsConv[[1]]))]
, chainsConv[[2]][,grep("mu_a", colnames(chainsConv[[2]]))]
, chainsConv[[3]][,grep("mu_a", colnames(chainsConv[[3]]))]
, chainsConv[[4]][,grep("mu_a", colnames(chainsConv[[4]]))]
, chainsConv[[5]][,grep("mu_a", colnames(chainsConv[[5]]))]
, chainsConv[[6]][,grep("mu_a", colnames(chainsConv[[6]]))]
, chainsConv[[7]][,grep("mu_a", colnames(chainsConv[[7]]))]
, chainsConv[[8]][,grep("mu_a", colnames(chainsConv[[8]]))]
, chainsConv[[9]][,grep("mu_a", colnames(chainsConv[[9]]))]
, chainsConv[[10]][,grep("mu_a", colnames(chainsConv[[10]]))])
# Mu.sep <- rbind ( chainsConv.sep[[1]][,grep("mu_a", colnames(chainsConv.sep[[1]]))]
#               , chainsConv.sep[[2]][,grep("mu_a", colnames(chainsConv.sep[[2]]))]
#               , chainsConv.sep[[3]][,grep("mu_a", colnames(chainsConv.sep[[3]]))]
#               , chainsConv.sep[[4]][,grep("mu_a", colnames(chainsConv.sep[[4]]))]
#               , chainsConv.sep[[5]][,grep("mu_a", colnames(chainsConv.sep[[5]]))]
#               , chainsConv.sep[[6]][,grep("mu_a", colnames(chainsConv.sep[[6]]))]
#               , chainsConv.sep[[7]][,grep("mu_a", colnames(chainsConv.sep[[7]]))]
#               , chainsConv.sep[[8]][,grep("mu_a", colnames(chainsConv.sep[[8]]))]
#               , chainsConv.sep[[9]][,grep("mu_a", colnames(chainsConv.sep[[9]]))]
#               , chainsConv.sep[[10]][,grep("mu_a", colnames(chainsConv.sep[[10]]))])
# par (mar=c(3,3,1,1))
# plot (colMeans (Mu), colMeans (Mu.sep), col=as.factor(actor.type)
#       , pch=19
#       , xlab="Joint scaling", ylab="McGann scaling")
# legend("topleft", legend=levels(as.factor(actor.type)), col=1:4
#        , bty="n", pch=19)
# abline (a=0, b=1)
# Citizen moods
Mu.cit <- Mu[,actor.type=="Citizen"]
# Mu.sep <- Mu.sep[,actor.type=="Citizen"]
pais.cit <- country[actor.type=="Citizen"]
anyo.cit <- year[actor.type=="Citizen"]
CitizenMoods <- c()
for (i in 1:ncol(Mu.cit)){
temp <- quantile (Mu.cit[,pais.cit==pais.cit[i] & anyo.cit==anyo.cit[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
CitizenMoods <- rbind (CitizenMoods, temp)
}
CitizenMoods <- as.data.frame (CitizenMoods)
colnames (CitizenMoods) <- c("q10","q25","q50","q75","q90")
CitizenMoods$real.year <- anyo.cit
CitizenMoods$pais <- pais.cit
rownames (CitizenMoods) <- 1:nrow(CitizenMoods)
# Legislator moods
Mu.leg <- Mu[,actor.type=="Legislator"]
pais.leg <- country[actor.type=="Legislator"]
anyo.leg <- year[actor.type=="Legislator"]
LegislatorMoods <- c()
for (i in 1:ncol(Mu.leg)){
temp <- quantile (Mu.leg[,pais.leg==pais.leg[i] & anyo.leg==anyo.leg[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
LegislatorMoods <- rbind (LegislatorMoods, temp)
}
LegislatorMoods <- as.data.frame (LegislatorMoods)
colnames (LegislatorMoods) <- c("q10","q25","q50","q75","q90")
LegislatorMoods$real.year <- anyo.leg
LegislatorMoods$pais <- pais.leg
rownames (LegislatorMoods) <- 1:nrow(LegislatorMoods)
LegislatorMoods$name <- paste (LegislatorMoods$pais, LegislatorMoods$real.year, sep="-")
# Senator moods
Mu.sen <- Mu[,actor.type=="Senator"]
pais.sen <- country[actor.type=="Senator"]
anyo.sen <- year[actor.type=="Senator"]
SenatorMoods <- c()
for (i in 1:ncol(Mu.sen)){
temp <- quantile (Mu.sen[,pais.sen==pais.sen[i] & anyo.sen==anyo.sen[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
SenatorMoods <- rbind (SenatorMoods, temp)
}
SenatorMoods <- as.data.frame (SenatorMoods)
colnames (SenatorMoods) <- c("q10","q25","q50","q75","q90")
SenatorMoods$real.year <- anyo.sen
SenatorMoods$pais <- pais.sen
rownames (SenatorMoods) <- 1:nrow(SenatorMoods)
SenatorMoods$name <- paste (SenatorMoods$pais, SenatorMoods$real.year, sep="-")
# President moods
Mu.pres <- Mu[,actor.type=="President"]
pais.pres <- country[actor.type=="President"]
anyo.pres <- year[actor.type=="President"]
PresidentMoods <- c()
for (i in 1:ncol(Mu.pres)){
temp <- quantile (Mu.pres[,pais.pres==pais.pres[i] & anyo.pres==anyo.pres[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
PresidentMoods <- rbind (PresidentMoods, temp)
}
PresidentMoods <- as.data.frame (PresidentMoods)
colnames (PresidentMoods) <- c("q10","q25","q50","q75","q90")
PresidentMoods$real.year <- anyo.pres
PresidentMoods$pais <- pais.pres
rownames (PresidentMoods) <- 1:nrow(PresidentMoods)
PresidentMoods$name <- paste (PresidentMoods$pais, PresidentMoods$real.year, sep="-")
countryLegs <- countryCol
countryLegs[grep("Brasil", countryLegs)] <- "Brazil"
countryLegs[grep("Republica Dominicana", countryLegs)] <- "DominicanRep"
countryLegs[grep("El Salvador", countryLegs)] <- "ElSalvador"
countryLegs[grep("Costa Rica", countryLegs)] <- "CostaRica"
whichLegs <- paste (countryLegs, yearCol, sep="-")
# Change names(Legislator.Moods) for Argentina-2005 to Argentina-2007
LegislatorMoods$name[grep ("Argentina-2005", LegislatorMoods$name)] <- "Argentina-2007" # this one may not coincide
# The next two vectors should be empty, if the matching works
LegislatorMoods$name[!is.element (LegislatorMoods$name, whichLegs)]
whichLegs[!is.element (whichLegs, LegislatorMoods$name)]
# check that the order in which Legislator.Moods is stored coincides with the order of whichLegs
identical (whichLegs, LegislatorMoods$name)   # will be false
# Don't panic: DominicanRep is sorted wrongly!
identical (sort(whichLegs), sort (LegislatorMoods$name))  # should be true
LegislatorMoods <- LegislatorMoods[order(LegislatorMoods$name),]
SenatorMoods <- SenatorMoods[order(SenatorMoods$name),]
PresidentMoods <- PresidentMoods[order(PresidentMoods$name),]
plotLegData <- data.frame (country=countryLegs
, survey.year=as.numeric(yearCol)
, survey=as.character (whichLegs)
, start.leg=as.numeric (substr (termCol, 1, 4))
, end.leg=as.numeric (substr (termCol, 6, 9))
, start.Sen=as.numeric (substr (termUpper, 1, 4))
, end.Sen=as.numeric (substr (termUpper, 6, 9))
, start.Pres=as.numeric (substr (termPres, 1, 4))
, end.Pres=as.numeric (substr (termPres, 6, 9)))
plotLegData$ccode <- car::recode (plotLegData$country, "'Argentina'='ARG';
'Bolivia'='BOL';
'Brazil'='BRZ';
'Chile'='CHL';
'Colombia'='COL';
'CostaRica'='CRC';
'Ecuador'='ECU';
'ElSalvador'='SLV';
'Guatemala'='GUA';
'Honduras'='HON';
'Mexico'='MEX';
'Nicaragua'='NIC';
'Panama'='PAN';
'Paraguay'='PRY';
'Peru'='PER';
'DominicanRep'='DOM';
'Uruguay'='URY';
'Venezuela'='VEN'")
plotLegData <- plotLegData[order(plotLegData$survey),]
Legislator.Moods <- merge (LegislatorMoods, plotLegData, by.x="name", by.y=as.character("survey"))
President.Moods  <- merge (PresidentMoods, plotLegData, by.x="name", by.y=as.character("survey"))
Senator.Moods    <- merge (SenatorMoods, plotLegData, by.x="name", by.y=as.character("survey"))
rm (LegislatorMoods, PresidentMoods, SenatorMoods)
# We need to correct President.Moods and Senate.Moods, because some presidents and senates are scored twice
samePres <- with (President.Moods
, paste (ccode, start.Pres, end.Pres, sep="-"))
sameSen <- with (Senator.Moods
, paste (ccode, start.Sen, end.Sen, sep="-"))
for (i in 1:length(samePres)) {
if (duplicated(samePres)[i]==TRUE) {
President.Moods$q10[i-1] <- (President.Moods$q10[i-1]+President.Moods$q10[i])/2
President.Moods$q25[i-1] <- (President.Moods$q25[i-1]+President.Moods$q25[i])/2
President.Moods$q50[i-1] <- (President.Moods$q50[i-1]+President.Moods$q50[i])/2
President.Moods$q75[i-1] <- (President.Moods$q75[i-1]+President.Moods$q75[i])/2
President.Moods$q90[i-1] <- (President.Moods$q90[i-1]+President.Moods$q90[i])/2
} else { next }
}
President.Moods <- President.Moods[duplicated(samePres)==FALSE,]
for (i in 1:length(sameSen)) {
if (duplicated(sameSen)[i]==TRUE) {
Senator.Moods$q10[i-1] <- (Senator.Moods$q10[i-1]+Senator.Moods$q10[i])/2
Senator.Moods$q25[i-1] <- (Senator.Moods$q25[i-1]+Senator.Moods$q25[i])/2
Senator.Moods$q50[i-1] <- (Senator.Moods$q50[i-1]+Senator.Moods$q50[i])/2
Senator.Moods$q75[i-1] <- (Senator.Moods$q75[i-1]+Senator.Moods$q75[i])/2
Senator.Moods$q90[i-1] <- (Senator.Moods$q90[i-1]+Senator.Moods$q90[i])/2
} else { next }
}
Senator.Moods <- Senator.Moods[duplicated(sameSen)==FALSE,]
########################
#### Average graphs ####
########################
# Graph for legislators
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
pdf (paste (graphPath, "moodMcGannAllLegs.pdf", sep=""), h=5, w=9)
ggplot(Legislator.Moods, aes(start.leg, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1)
, labels=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1))
dev.off()
# Graph for presidents
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
pdf (paste (graphPath, "moodMcGannAllPresidents.pdf", sep=""), h=5, w=9)
ggplot(President.Moods, aes(start.Pres, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5)
, labels=c(-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5))
dev.off()
# Graph for senators
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
pdf (paste (graphPath, "moodMcGannAllSenators.pdf", sep=""), h=5, w=9)
#ggplot(plotLegData, aes(survey.year, policy.moods)) +
ggplot(Senator.Moods, aes(start.Sen, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1)
, labels=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1))
dev.off()
fit.l <- lm (q50 ~ as.factor(survey.year), data=Legislator.Moods)
fit.s <- lm (q50 ~ as.factor(survey.year), data=Senator.Moods)
fit.p <- lm (q50 ~ as.factor(survey.year), data=President.Moods)
anova (fit.l)
round (anova(fit.l)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.l)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
anova (fit.s)
round (anova(fit.s)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.s)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
anova (fit.p)
round (anova(fit.p)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.p)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
# Plots
# The next lines read auxiliary information to plot presidential paths
Pela <- LegMI    #; rm (LegMI)
Pela$pais <- recode (Pela$pais, "'Costa Rica'='CostaRica'; 'Brasil'='Brazil';
'El Salvador'='ElSalvador'; 'Republica Dominicana'='DominicanRep'")
Pela$pais <- as.factor (Pela$pais)
Pela$paisYear <- as.factor (paste (Pela$pais, Pela$year, sep="-"))
colnames (Pela)[grep("LR.ideology.self", colnames(Pela))] <- "left.right"
id <- names (by (Pela$PartyAcronym, Pela$paisYear, unique))
presidentialParties <- c("PJ","PJ","PJ","PJ","PJ"  # Argentina
,"MNR","ADN","MNR","MAS"  # Bolivia
,"PT","PT","PT"           # Brazil
,"DC","DC","PS","PS","RN" # Chile
,"PC","PL-U","U","U"      # Colombia
,"PLN","PUSC","PUSC","PLN","PLN" # Costa Rica
,"PRD","PLD","PRD","PLD","PLD" # DomRep
,"PRE","DP","PRIAN","PRIAN","MPAIS" # Ecuador
,"ARENA","ARENA","ARENA","ARENA","FMLN" # El Salvador
,"PAN","FRG","Patriota","UNE","Patriota" # Guatemala
,"PL","PL","PN","PL","PN"  # Honduras
,"PRI","PRI","PAN","PAN","PAN","PAN" # Mexico
,"AL","PLC","FSLN"  # Nicaragua
,"PA","PRD","CD"   # Panama
,"ANR","ANR","ANR","Other"  # Paraguay
,"Cambio90","PP","PAP"  # Peru
,"PC","PC","FA","FA" # Uruguay
,"AD","MVR")   # Venezuela
prezParties <- data.frame (presidentialParties=presidentialParties
, paisYear=id)
samePres <- c("Argentina-1997","Argentina-2005","ElSalvador-1997","ElSalvador-2003","Mexico-1997","Mexico-2003","Mexico-2009")
prezPartiesBis <- prezParties[!is.element(prezParties$paisYear, samePres),]
# Read information about presidents
prezPartiesBis$pais <- unlist (strsplit (as.character(prezPartiesBis$paisYear), split="-"))[odd(1:(nrow(prezPartiesBis)*2))]
prezPartiesBis$year <- unlist (strsplit (as.character(prezPartiesBis$paisYear), split="-"))[even(1:(nrow(prezPartiesBis)*2))]
countryNames <- c("Argentina","Bolivia","Brazil","Chile"
,"Colombia","CostaRica","Ecuador","ElSalvador"
,"Guatemala","Honduras","Mexico","Nicaragua"
,"Panama","Paraguay","Peru","DominicanRep"
,"Uruguay","Venezuela")
for (i in 1:length(countryLabels)){
which.country <- c(1:18)[i]
which.country.name <- countryNames[i]
which.country.label <- countryLabels[i]
pdf (paste0("~/Dropbox/ChainBook/BookManuscript/Graphs/pooledExpandedPlusMoodsByCountry"
, which.country.name, ".pdf"), h=7, w=14)
dat  <- Legislator.Moods[Legislator.Moods$country==which.country.name,]
dat.s  <- Senator.Moods[Senator.Moods$country==which.country.name,]
dat.p  <- President.Moods[President.Moods$country==which.country.name,]
tmpPrez <- prezPartiesBis[prezPartiesBis$pais==which.country.name,]
tmp <- PartyLabelsData[PartyLabelsData$pais==which.country.name,]
md.cit <- CitizenMoods[CitizenMoods$pais==which.country.name, "q50"]
yr.cit <- CitizenMoods[CitizenMoods$pais==which.country.name, "real.year"]
md.pol <- Legislator.Moods[Legislator.Moods$pais==which.country.name, "q50"]
yr.pol <- Legislator.Moods[Legislator.Moods$pais==which.country.name,"real.year"]
#tp.pol <- actor.name.nest[country.mood==which.country & type.mood!=1]
# The problem is that the President.Moods objects do not contain all of
# the moods that we should have for five Argentine presidents
# (This has already been corrected in
# legislatorsPreferencesMcGannPostBlender.R)
par (srt=0, las=2, mar=c(4,3,1,1), mfrow=c(1,1))
plot (c(1993,2015),c(-3,4), type="n", main="", ylab="", xlab="", axes=F)
axis (2)
axis (1, at=c(1993:2015), labels=c(1993:2015))
par (las=0)
mtext (side=2, line=2, text="Pro-market policy mood")
legend ("bottomleft", legend=which.country.label, bty="n", cex=1.2)
# segments (y0=md.cit[,2], y1=md.cit[,4], x0=yr.cit, x1=yr.cit, col="gray")
# points ( xy.coords ( yr.cit, md.cit[,3] ), pch=19, col="gray", type="p")
for (j in 1:nrow(dat)){
polygon (x=c(rep(dat$start.leg[j], 2), rep(dat$end.leg[j], 2))
, y=c(dat$q25[j], dat$q75[j], dat$q75[j], dat$q25[j])
, border=NA, col=rgb(1,10/255,10/255,0.5))
segments (y0=dat$q50[j]
, y1=dat$q50[j]
, x0=dat$start.leg[j]
, x1=dat$end.leg[j]
, lwd=1, col=rgb(1,10/255,10/255,0.9))
text (x=dat$start.leg[j] + 0.5*(dat$end.leg[j]-dat$start.leg[j])
, y=dat$q75[j], pos=3
, labels=paste0 (tmp$largestLHparty[j], " (", round(tmp$largestLHshare[j]*100, 1), ")")
, cex=0.7, col="red")
}
for (j in 1:nrow(dat.p)){
polygon (x=c(rep(dat.p$start.Pres[j], 2), rep(dat.p$end.Pres[j], 2))
, y=c(dat.p$q25[j], dat.p$q75[j], dat.p$q75[j], dat.p$q25[j])
, border=NA, col=rgb(0,5/255,1,0.5))
segments (y0=dat.p$q50[j]
, y1=dat.p$q50[j]
, x0=dat.p$start.Pres[j]
, x1=dat.p$end.Pres[j]
, lwd=1, col=rgb(0,5/255,1,0.9))
text (x=dat.p$start.Pres[j] + 0.5*(dat.p$end.Pres[j]-dat.p$start.Pres[j])
, y=dat.p$q50[j], pos=3
, labels=tmpPrez$presidentialParties[j]
, cex=0.7, col="blue")
}
if (which.country.name=="Mexico") {tmp <- tmp[c(1,2,3,5),]}  # fix for Mexico's Senate
if (nrow(dat.s) >= 1) {
for (j in 1:nrow(dat.s)){
polygon (x=c(rep(dat.s$start.Sen[j], 2), rep(dat.s$end.Sen[j], 2))
, y=c(dat.s$q25[j], dat.s$q75[j], dat.s$q75[j], dat.s$q25[j])
, border=NA, col=rgb(1,135/255,0,0.5))
segments (y0=dat.s$q50[j]
, y1=dat.s$q50[j]
, x0=dat.s$start.Sen[j]
, x1=dat.s$end.Sen[j]
, lwd=1, col=rgb(1,135/255,0,0.9))
text (x=dat.s$start.Sen[j] + 0.5*(dat.s$end.Sen[j]-dat.s$start.Sen[j])
, y=dat.s$q25[j], pos=1
, labels=paste0 (tmp$largestUHparty[j], " (", round(tmp$largestUHshare[j]*100, 1), ")")
, cex=0.7, col="orange")
}
legend ("bottomright", legend=c("President","Lower House","Upper House")
, bty="n", col=c("blue","red","orange"), pch=19)
} else {
legend ("bottomright", legend=c("President","Lower House")
, bty="n", col=c("blue","red"), pch=19)
}
dev.off()
}
#######################################################
#### Comparing legislature and senate policy moods ####
#### against a bunc
Legislator.Moods[Legislator.Moods$country=="Argentina",]
Legislator.Moods$q50[Legislator.Moods$country=="Argentina"]
round (Legislator.Moods$q50[Legislator.Moods$country=="Argentina"], 2)
round (Legislator.Moods$q50[Legislator.Moods$country=="Mexico"], 2)
colnames (chainsConv[[1]])
colnames (chainsConv[[1]])[1000:2000]
Sigma <- rbind ( chainsConv[[1]][,grep("sigma", colnames(chainsConv[[1]]))]
, chainsConv[[2]][,grep("sigma", colnames(chainsConv[[2]]))]
, chainsConv[[3]][,grep("sigma", colnames(chainsConv[[3]]))]
, chainsConv[[4]][,grep("sigma", colnames(chainsConv[[4]]))]
, chainsConv[[5]][,grep("sigma", colnames(chainsConv[[5]]))]
, chainsConv[[6]][,grep("sigma", colnames(chainsConv[[6]]))]
, chainsConv[[7]][,grep("sigma", colnames(chainsConv[[7]]))]
, chainsConv[[8]][,grep("sigma", colnames(chainsConv[[8]]))]
, chainsConv[[9]][,grep("sigma", colnames(chainsConv[[9]]))]
, chainsConv[[10]][,grep("sigma", colnames(chainsConv[[10]]))])
dim (Sigma)
length (actor.type)
Sigma[,actor.type=="Legislator" & country=="Mexico"]
dim (Sigma[,actor.type=="Legislator" & country=="Mexico"])
colMeans (Sigma[,actor.type=="Legislator" & country=="Mexico"])
year
colMeans (Sigma[,actor.type=="Legislator" & country=="Mexico"])
year[actor.type=="Legislator" & country=="Mexico"]
