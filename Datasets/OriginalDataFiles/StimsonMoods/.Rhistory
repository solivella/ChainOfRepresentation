#### Plots of policy-makers policy moods ####
#############################################
library (tidyverse)
library (gtools)
library (reshape2)
library (plyr)
library (runjags)
library (MCMCpack)
library (mcmcplots)
library (car)
library (parallel)
library (data.table)
library (lme4)
library (zoo)
library (xtable)
library (rstan)
library (rminer)
library (ggrepel)
# Set graphs path
graphPath <- "~/Dropbox/ChainBook/BookManuscript/Graphs/"
dataPath  <- "~/Dropbox/ChainBook/Datasets/OriginalDataFiles/"
# Correlation function to be used below
cor.test.plus <- function(x) {
list(x,
Standard.Error = unname(sqrt((1 - x$estimate^2)/x$parameter)))
}
####################
# Load legislators #
####################
# These data include the individual level responses, not the percentages that we eventually use
load (file=paste0 (dataPath, "PELAIndividualResponsesMI.RData"))
colnames (LegMI)
LegMI$id <- paste (LegMI$pais, LegMI$year, LegMI$Term, sep="/")
aggdata <- as.character (aggregate(LegMI$id, by=list(LegMI$id),
FUN=unique, na.rm=FALSE)[,2])
countryCol <- unlist (strsplit (aggdata, split="/", fixed=TRUE ))[seq(1,length(aggdata)*3,by=3)]
yearCol <- unlist (strsplit (aggdata, split="/", fixed=TRUE ))[seq(2,length(aggdata)*3,by=3)]
termCol <- unlist (strsplit (aggdata, split="/", fixed=TRUE ))[seq(3,length(aggdata)*3,by=3)]
# Introduce corrections to termCol, so that all legislative terms
# coincide with what we see in NewPartyWeights.csv.
# Recall that the terms were not always well put together
yearCol[countryCol=="Argentina" & yearCol=="2005"] <- "2007"
termCol[countryCol=="Argentina" & termCol=="2007-2011"] <- "2007-2009"
termCol[countryCol=="Bolivia" & termCol=="2002-2007"] <- "2002-2005"
termCol[countryCol=="Mexico" & termCol=="2009-2011"] <- "2009-2012"
termCol[countryCol=="Uruguay" & termCol=="2009-2014"] <- "2010-2015"
# Introduce term columns for Senate and for Presidents
party.weights <- read.csv(paste0 (dataPath, "NewPartyWeights.csv"), na.strings="NA")
termUpper <- termPres <- c()
for (i in 1:length (termCol)) {
termUpper[i] <- as.character (unique (party.weights$TermUpper[party.weights$Country==countryCol[i] & party.weights$CorrectTerm==termCol[i]]))
termPres[i]  <- as.character (unique (party.weights$TermPres[party.weights$Country==countryCol[i] & party.weights$CorrectTerm==termCol[i]]))
}
##################################################################################
## These lines produce an object that we later use for plotting
##################################################################################
largestLHparty <- largestLHshare <- c()
largestUHparty <- largestUHshare <- c()
termLH <- termUH <- termPrez <- land <- match.year <- c()
for (i in 1:length (termCol)) {
tmp <- party.weights[party.weights$Country==countryCol[i] & party.weights$CorrectTerm==termCol[i],]
yr <- yearCol[i]
ld <- as.character (unique (tmp$Country))
LH <- termCol[i]
UH <- termUpper[i]
Prez <- termPres[i]
largeLHp <- paste ( as.character (tmp$PartyAcronym[which (tmp$Seat.ShareLH==max(tmp$Seat.ShareLH))]), collapse="/")
largeLHs <- unique (tmp$Seat.ShareLH[which (tmp$Seat.ShareLH==max(tmp$Seat.ShareLH))])
# largeLHs <- tmp$Seat.ShareLH[which (tmp$Seat.ShareLH==max(tmp$Seat.ShareLH))]
if ( invalid (tmp$Seat.ShareUH)) {
largeUHp <- NA
largeUHs <- NA
} else {
largeUHp <- paste ( as.character (tmp$PartyAcronym[which (tmp$Seat.ShareUH==max(tmp$Seat.ShareUH))]), collapse="/")
largeUHs <- unique (tmp$Seat.ShareUH[which (tmp$Seat.ShareUH==max(tmp$Seat.ShareUH))])
}
land <- c(land, ld)
termLH <- c(termLH, LH)
termUH <- c(termUH, UH)
termPrez <- c(termPrez, Prez)
match.year <- c(match.year, yr)
largestLHparty <- c(largestLHparty, largeLHp)
largestLHshare <- c(largestLHshare, largeLHs)
largestUHparty <- c(largestUHparty, largeUHp)
largestUHshare <- c(largestUHshare, largeUHs)
}
PartyLabelsData <- data.frame (pais=land, termLH=termLH, termUH=termUH
, termPrez=termPrez, matchYear=match.year
, largestLHparty=largestLHparty
, largestUHparty=largestUHparty
, largestLHshare=largestLHshare
, largestUHshare=largestUHshare)
write.csv (PartyLabelsData
, file="~/Dropbox/ChainBook/Datasets/FinishedOutput/PartyLabelsData.csv"
, row.names=FALSE)
##################################################################################
# Execute, copy, and drop in AppendixWordingLegislators.tex
xtable (data.frame (Country=countryCol, Survey.Year=yearCol, Legislature=termCol, Senate=termUpper, Executive=termPrez)
, caption="Legislatures in Latin America for which we have legislators' policy positions"
, label="T:availLeg")
# Show a high correlation between party weights of lower and upper houses
cor (cbind (party.weights$Seat.ShareLH, party.weights$Seat.ShareUH), use="p")
pdf (paste0(graphPath, "discrepantSeatShares.pdf"), h=5, w=7)
par (mar=c(4,4,1,1))
plot (party.weights$Seat.ShareLH, party.weights$Seat.ShareUH, pch=19, col="grey"
, ylab="Party seat shares, upper houses", xlab="Party seat shares, lower houses")
discrepant.UH <- which (party.weights$Seat.ShareUH[party.weights$Seat.ShareLH<0.1]>0.5)
discrepant.LH <- which (party.weights$Seat.ShareLH[party.weights$Seat.ShareUH<0.2]>0.4)
discrepant.UH.hi <- which (party.weights$Seat.ShareLH[party.weights$Seat.ShareUH>0.76]>0.4)
text (xy.coords (party.weights$Seat.ShareLH[party.weights$Seat.ShareLH<0.1][discrepant.UH]
,party.weights$Seat.ShareUH[party.weights$Seat.ShareLH<0.1][discrepant.UH])
, labels=paste(party.weights$Country[party.weights$Seat.ShareLH<0.1][discrepant.UH]
, party.weights$CorrectTerm[party.weights$Seat.ShareLH<0.1][discrepant.UH]
, party.weights$PartyAcronym[party.weights$Seat.ShareLH<0.1][discrepant.UH], sep=",")
, cex=0.8, pos=4)
text (xy.coords (party.weights$Seat.ShareLH[party.weights$Seat.ShareUH>0.76][discrepant.UH.hi]
,party.weights$Seat.ShareUH[party.weights$Seat.ShareUH>0.76][discrepant.UH.hi])
, labels=paste(party.weights$Country[party.weights$Seat.ShareUH>0.76][discrepant.UH.hi]
, party.weights$CorrectTerm[party.weights$Seat.ShareUH>0.76][discrepant.UH.hi]
, party.weights$PartyAcronym[party.weights$Seat.ShareUH>0.76][discrepant.UH.hi], sep=",")
, cex=0.8, pos=2)
text (xy.coords (party.weights$Seat.ShareLH[party.weights$Seat.ShareUH<0.2][discrepant.LH]
,party.weights$Seat.ShareUH[party.weights$Seat.ShareUH<0.2][discrepant.LH])
, labels=paste(party.weights$Country[party.weights$Seat.ShareUH<0.2][discrepant.LH]
, party.weights$CorrectTerm[party.weights$Seat.ShareUH<0.2][discrepant.LH]
, party.weights$PartyAcronym[party.weights$Seat.ShareUH<0.2][discrepant.LH], sep=",")
, cex=0.8, pos=3)
abline (a=0, b=1, lty=2)
dev.off()
availCountries <- read.table (file=paste0 (dataPath, "PELAavailableDataSurveyOnRows.txt")
, sep="\t", header=T)
# Function to change levels of a factor
changeLevels <- function (var) {
if (is.factor(var)==FALSE) {
print ("Not a factor")
} else {
temp <- delevels (var, levels=levels(var), label=1)
temp <- delevels (temp, levels="", label=NA)
temp <- as.numeric (temp)
return (temp)
}
vars2recode <- colnames (availCountries)[!is.element(colnames(availCountries), c("id","Year","Country"))]
for (i in 1:ncol(availCountries)) {
if (!is.element (colnames(availCountries)[i], vars2recode)) { next }
else {
availCountries[,i] <- changeLevels (availCountries[,i])
}
################################################
# Plot country-years for which we have surveys #
################################################
countryLabels <- as.character (sort (unique (availCountries$Country)))
countryLabels[grep("Brasil", countryLabels)] <- "Brazil"
countryLabels[grep("Republica Dominicana", countryLabels)] <- "Dominican Rep."
yearLabels <- 1993:2013
pdf (paste (graphPath, "surveyAvailabilityLegislators.pdf", sep=""), h=7, w=10)
par (mar=c(4,8,1,1), las=2, mfrow=c(1,1))
plot (c(1, length(yearLabels)), c(1, length(countryLabels))
, type="n", axes=F, ylab="", xlab="")
axis (1, at=c(1:length(yearLabels)), labels=yearLabels)
axis (2, at=c(1:length(countryLabels)), labels=countryLabels)
abline (h=1:length(countryLabels), lty=3)
no.surveys <- c()
for (i in 1:length(countryLabels)) {
cntr <- levels (availCountries$Country)[i]
surv <- sort (unique (availCountries$Year[availCountries$Country==cntr]))
no.surveys <- c(no.surveys, length (surv))
points (xy.coords (c(1:length(yearLabels))[is.element (yearLabels, as.numeric(surv))], rep (i, length(surv)))
, pch=19, cex=1, col="black")
}
dev.off()
# Number of surveys per country contained in no.surveys
fivenum (no.surveys)
############################
#### Read in Stan moods ####
############################
graphicsPath <- "~/Dropbox/ChainBook/BookManuscript/Graphs/"  # Save copies here as well
load (file="~/Dropbox/ChainBook/Code/Code4_5_Blender/McGannIRT.RData")
load (file="~/Dropbox/ChainBook/Code/Code4_5_Blender/JointIRT.RData")
# Load MCMC object
chainsConv <- rstan::As.mcmc.list(common_model)
chainsConv.sep <- rstan::As.mcmc.list(common_modelMcGann)
# rstan::summary(common_model, "mu")$summary[,"Rhat"]
load("~/Dropbox/ChainBook/Code/Code4_5_Blender/sharedItemParameterData.RData")
# load (file="~/Dropbox/ChainBook/Datasets/OriginalDataFiles/itemsPerYear.RData")
## Prepare data
finalData$ActorCtyYr <- as.integer(as.factor(with(finalData,
paste(type, country, year))))
finalData <- finalData[order(finalData$ActorCtyYr),]
finalData$QuestionID <- as.integer(as.factor(with(finalData,
paste(country, QuestionName))))
##pm-country-years
pmct <- finalData %>% filter(type!="Government")
##p-country-years
pct1 <- finalData %>%
filter(type=="Government" &
QuestionName %in% c("privatization.beneficial",
"capital.mobility.good")) %>%
mutate_at("value", function(x)case_when(x < 3 ~ 0, TRUE ~ 1))
pct2 <- finalData %>%
filter(type=="Government" &
!(QuestionName %in% c("privatization.beneficial",
"capital.mobility.good")))
# Get type, country, year
actor <- with (finalData, tapply (type, ActorCtyYr, unique))
country <- with (finalData, tapply (country, ActorCtyYr, unique))
year <- with (finalData, tapply (year, ActorCtyYr, unique))
actor.type <- actor[actor != "Government"]
country <- country[actor != "Government"]
year    <- year[actor != "Government"]
########################
# Graph available data #
########################
vars2recode <- vars2recode[!is.element(vars2recode, c("LR.ideology.prez1","LR.ideology.self","PartyCode"))]
jagsDataLeg <- finalData %>% filter(type=="Legislator")
# These graphs go into Chapter ChPoliticianPreferences.tex as "F:availableStimuli"
count.items.available <- items.available <- list()
whichCountry <- whichYear <- countItems <- c()
for (i in 1:length(unique(jagsDataLeg$country))) {
pais <- unique (jagsDataLeg$country)[i]
prettyPais <- car::recode (pais, "'ElSalvador'='El Salvador';
'DominicanRep'='Dominican Republic';
'CostaRica'='Costa Rica'")
tempData <- jagsDataLeg[jagsDataLeg$country==pais,]
# Which issues appear only once
badIssues <- which (table(tempData$q)==1)
tempData <- tempData[!is.element(tempData$q,as.numeric (names (badIssues))),]
surv <- sort (unique (tempData$year))
howManyItems <- yr <- ps <- c()
for (j in 1:length(surv)){
howManyItems <- c(howManyItems, length (tempData$QuestionName[tempData$year==surv[j]]))
yr <- c(yr, surv[j])
ps <- c(ps, pais)
}
whichCountry <- c(whichCountry, ps)
whichYear <- c(whichYear, yr)
countItems <- c(countItems, howManyItems)
pdf (paste(graphPath, "availStimuliLegislators", pais, ".pdf", sep=""), h=9, w=5)
par (mar=c(4,11,2,1), las=2, cex.axis=0.8)
plot (c(1,23), c(1,length(vars2recode)), type="n", axes=F, ylab="", xlab="")
axis (1, at=1:23, labels = 1992:2014)
axis (2, at=1:length(vars2recode), labels = vars2recode, cex=0.9)
par (las=0); mtext (side=3, line=0, at=9.5, prettyPais)
abline (v=1:23, lty=3)
abline (h=1:length(vars2recode), lty=3)
for (j in 1:length(surv)){
whichLabels <- tempData$QuestionName[tempData$year==surv[j]]
whichX <- surv[j]-1991
whichY <- c(1:length(vars2recode))[is.element (vars2recode, whichLabels)]
points (xy.coords(rep(surv[j]-1991, length(whichY)), whichY), pch=19)
}
items.available[[i]] <- vars2recode[is.element (vars2recode, unique (tempData$QuestionName))]
count.items.available[[i]] <- table (tempData$QuestionName)
dev.off()
}
##########################################################################################
# Some descriptive stats about the number of items per legislature
##########################################################################################
data.frame (whichCountry, whichYear, countItems) # print all information
min (countItems) # minimum number of items (6)
whichCountry[which (countItems<6)] # No legislature now with anything less than 6 items
whichCountry[which (countItems==max(countItems))] # Legislatures with 14 items
round (mean (countItems), 2) # average number of items per legislature
##########################################################################################
#######################################################################
#### Presidents: how many weighted percentages close to 100% or 0% ####
#######################################################################
jagsDataPres <- finalData %>% filter(type=="President")
# Read labels for party that holds largest plurality in the country
PartyLabelsData <- read.csv (file="~/Dropbox/ChainBook/Datasets/FinishedOutput/PartyLabelsData.csv"
, header=TRUE)
levels (PartyLabelsData$pais) <- car::recode (levels (PartyLabelsData$pais)
, "'Brasil'='Brazil'
; 'Costa Rica'='CostaRica'
; 'Republica Dominicana'='DominicanRep'
; 'El Salvador'='ElSalvador'")
################################################
#### Get policy moods for all policy-makers ####
################################################
# Summaries of posterior distribution
Mu <- rbind ( chainsConv[[1]][,grep("mu_a", colnames(chainsConv[[1]]))]
, chainsConv[[2]][,grep("mu_a", colnames(chainsConv[[2]]))]
, chainsConv[[3]][,grep("mu_a", colnames(chainsConv[[3]]))]
, chainsConv[[4]][,grep("mu_a", colnames(chainsConv[[4]]))]
, chainsConv[[5]][,grep("mu_a", colnames(chainsConv[[5]]))]
, chainsConv[[6]][,grep("mu_a", colnames(chainsConv[[6]]))]
, chainsConv[[7]][,grep("mu_a", colnames(chainsConv[[7]]))]
, chainsConv[[8]][,grep("mu_a", colnames(chainsConv[[8]]))]
, chainsConv[[9]][,grep("mu_a", colnames(chainsConv[[9]]))]
, chainsConv[[10]][,grep("mu_a", colnames(chainsConv[[10]]))])
Mu.sep <- rbind ( chainsConv.sep[[1]][,grep("mu_a", colnames(chainsConv.sep[[1]]))]
, chainsConv.sep[[2]][,grep("mu_a", colnames(chainsConv.sep[[2]]))]
, chainsConv.sep[[3]][,grep("mu_a", colnames(chainsConv.sep[[3]]))]
, chainsConv.sep[[4]][,grep("mu_a", colnames(chainsConv.sep[[4]]))]
, chainsConv.sep[[5]][,grep("mu_a", colnames(chainsConv.sep[[5]]))]
, chainsConv.sep[[6]][,grep("mu_a", colnames(chainsConv.sep[[6]]))]
, chainsConv.sep[[7]][,grep("mu_a", colnames(chainsConv.sep[[7]]))]
, chainsConv.sep[[8]][,grep("mu_a", colnames(chainsConv.sep[[8]]))]
, chainsConv.sep[[9]][,grep("mu_a", colnames(chainsConv.sep[[9]]))]
, chainsConv.sep[[10]][,grep("mu_a", colnames(chainsConv.sep[[10]]))])
par (mar=c(3,3,1,1))
plot (colMeans (Mu), colMeans (Mu.sep), col=as.factor(actor.type)
, pch=19
, xlab="Joint scaling", ylab="McGann scaling")
legend("topleft", legend=levels(as.factor(actor.type)), col=1:4
, bty="n", pch=19)
abline (a=0, b=1)
# Legislator moods
Mu.leg <- Mu.sep[,actor.type=="Legislator"]
pais.leg <- country[actor.type=="Legislator"]
anyo.leg <- year[actor.type=="Legislator"]
LegislatorMoods <- c()
for (i in 1:ncol(Mu.leg)){
temp <- quantile (Mu.sep[,pais.leg==pais.leg[i] & anyo.leg==anyo.leg[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
LegislatorMoods <- rbind (LegislatorMoods, temp)
}
LegislatorMoods <- as.data.frame (LegislatorMoods)
colnames (LegislatorMoods) <- c("q10","q25","q50","q75","q90")
LegislatorMoods$real.year <- anyo.leg
LegislatorMoods$pais <- pais.leg
rownames (LegislatorMoods) <- 1:nrow(LegislatorMoods)
LegislatorMoods$name <- paste (LegislatorMoods$pais, LegislatorMoods$real.year, sep="-")
# Senator moods
Mu.sen <- Mu.sep[,actor.type=="Senator"]
pais.sen <- country[actor.type=="Senator"]
anyo.sen <- year[actor.type=="Senator"]
SenatorMoods <- c()
for (i in 1:ncol(Mu.sen)){
temp <- quantile (Mu.sep[,pais.sen==pais.sen[i] & anyo.sen==anyo.sen[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
SenatorMoods <- rbind (SenatorMoods, temp)
}
SenatorMoods <- as.data.frame (SenatorMoods)
colnames (SenatorMoods) <- c("q10","q25","q50","q75","q90")
SenatorMoods$real.year <- anyo.sen
SenatorMoods$pais <- pais.sen
rownames (SenatorMoods) <- 1:nrow(SenatorMoods)
SenatorMoods$name <- paste (SenatorMoods$pais, SenatorMoods$real.year, sep="-")
# President moods
Mu.pres <- Mu.sep[,actor.type=="President"]
pais.pres <- country[actor.type=="President"]
anyo.pres <- year[actor.type=="President"]
PresidentMoods <- c()
for (i in 1:ncol(Mu.pres)){
temp <- quantile (Mu.sep[,pais.pres==pais.pres[i] & anyo.pres==anyo.pres[i]]
, prob=c(0.1,0.25,0.5,0.75,0.9))
PresidentMoods <- rbind (PresidentMoods, temp)
}
PresidentMoods <- as.data.frame (PresidentMoods)
colnames (PresidentMoods) <- c("q10","q25","q50","q75","q90")
PresidentMoods$real.year <- anyo.pres
PresidentMoods$pais <- pais.pres
rownames (PresidentMoods) <- 1:nrow(PresidentMoods)
PresidentMoods$name <- paste (PresidentMoods$pais, PresidentMoods$real.year, sep="-")
countryLegs <- countryCol
countryLegs[grep("Brasil", countryLegs)] <- "Brazil"
countryLegs[grep("Republica Dominicana", countryLegs)] <- "DominicanRep"
countryLegs[grep("El Salvador", countryLegs)] <- "ElSalvador"
countryLegs[grep("Costa Rica", countryLegs)] <- "CostaRica"
whichLegs <- paste (countryLegs, yearCol, sep="-")
# Change names(Legislator.Moods) for Argentina-2005 to Argentina-2007
LegislatorMoods$name[grep ("Argentina-2005", LegislatorMoods$name)] <- "Argentina-2007" # this one may not coincide
# The next two vectors should be empty, if the matching works
LegislatorMoods$name[!is.element (LegislatorMoods$name, whichLegs)]
whichLegs[!is.element (whichLegs, LegislatorMoods$name)]
# check that the order in which Legislator.Moods is stored coincides with the order of whichLegs
identical (whichLegs, LegislatorMoods$name)   # will be false
# Don't panic: DominicanRep is sorted wrongly!
identical (sort(whichLegs), sort (LegislatorMoods$name))  # should be true
LegislatorMoods <- LegislatorMoods[order(LegislatorMoods$name),]
SenatorMoods <- SenatorMoods[order(SenatorMoods$name),]
PresidentMoods <- PresidentMoods[order(PresidentMoods$name),]
plotLegData <- data.frame (country=countryLegs
, survey.year=as.numeric(yearCol)
, survey=as.character (whichLegs)
, start.leg=as.numeric (substr (termCol, 1, 4))
, end.leg=as.numeric (substr (termCol, 6, 9))
, start.Sen=as.numeric (substr (termUpper, 1, 4))
, end.Sen=as.numeric (substr (termUpper, 6, 9))
, start.Pres=as.numeric (substr (termPres, 1, 4))
, end.Pres=as.numeric (substr (termPres, 6, 9)))
plotLegData$ccode <- car::recode (plotLegData$country, "'Argentina'='ARG';
'Bolivia'='BOL';
'Brazil'='BRZ';
'Chile'='CHL';
'Colombia'='COL';
'CostaRica'='CRC';
'Ecuador'='ECU';
'ElSalvador'='SLV';
'Guatemala'='GUA';
'Honduras'='HON';
'Mexico'='MEX';
'Nicaragua'='NIC';
'Panama'='PAN';
'Paraguay'='PRY';
'Peru'='PER';
'DominicanRep'='DOM';
'Uruguay'='URY';
'Venezuela'='VEN'")
plotLegData <- plotLegData[order(plotLegData$survey),]
Legislator.Moods <- merge (LegislatorMoods, plotLegData, by.x="name", by.y=as.character("survey"))
President.Moods  <- merge (PresidentMoods, plotLegData, by.x="name", by.y=as.character("survey"))
Senator.Moods    <- merge (SenatorMoods, plotLegData, by.x="name", by.y=as.character("survey"))
rm (LegislatorMoods, PresidentMoods, SenatorMoods)
# We need to correct President.Moods and Senate.Moods, because some presidents and senates are scored twice
samePres <- with (President.Moods
, paste (ccode, start.Pres, end.Pres, sep="-"))
sameSen <- with (Senator.Moods
, paste (ccode, start.Sen, end.Sen, sep="-"))
for (i in 1:length(samePres)) {
if (duplicated(samePres)[i]==TRUE) {
President.Moods$q10[i-1] <- (President.Moods$q10[i-1]+President.Moods$q10[i])/2
President.Moods$q25[i-1] <- (President.Moods$q25[i-1]+President.Moods$q25[i])/2
President.Moods$q50[i-1] <- (President.Moods$q50[i-1]+President.Moods$q50[i])/2
President.Moods$q75[i-1] <- (President.Moods$q75[i-1]+President.Moods$q75[i])/2
President.Moods$q90[i-1] <- (President.Moods$q90[i-1]+President.Moods$q90[i])/2
} else { next }
}
President.Moods <- President.Moods[duplicated(samePres)==FALSE,]
for (i in 1:length(sameSen)) {
if (duplicated(sameSen)[i]==TRUE) {
Senator.Moods$q10[i-1] <- (Senator.Moods$q10[i-1]+Senator.Moods$q10[i])/2
Senator.Moods$q25[i-1] <- (Senator.Moods$q25[i-1]+Senator.Moods$q25[i])/2
Senator.Moods$q50[i-1] <- (Senator.Moods$q50[i-1]+Senator.Moods$q50[i])/2
Senator.Moods$q75[i-1] <- (Senator.Moods$q75[i-1]+Senator.Moods$q75[i])/2
Senator.Moods$q90[i-1] <- (Senator.Moods$q90[i-1]+Senator.Moods$q90[i])/2
} else { next }
}
Senator.Moods <- Senator.Moods[duplicated(sameSen)==FALSE,]
########################
#### Average graphs ####
########################
# Graph for legislators
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
# pdf (paste (graphPath, "moodMcGannAllLegs.pdf", sep=""), h=5, w=9)
ggplot(Legislator.Moods, aes(start.leg, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1)
, labels=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1))
# dev.off()
# Graph for presidents
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
# pdf (paste (graphPath, "moodMcGannAllPresidents.pdf", sep=""), h=5, w=9)
ggplot(President.Moods, aes(start.Pres, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5)
, labels=c(-1.5,-1,-0.5,0,0.5,1,1.5,2,2.5))
# dev.off()
# Graph for senators
## Adding confidence interval
geom.text.size = 3
theme.size = (14/5) * geom.text.size
# pdf (paste (graphPath, "moodMcGannAllSenators.pdf", sep=""), h=5, w=9)
#ggplot(plotLegData, aes(survey.year, policy.moods)) +
ggplot(Senator.Moods, aes(start.Sen, q50)) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 0)
) +
geom_text_repel(aes(label=ccode)
, box.padding=unit(0.45, "lines")
, size=geom.text.size) +
geom_point(size=3, colour="gray") +
geom_smooth(colour="black") +
scale_x_continuous(name="", breaks=1993:2013
, labels=as.character(yearLabels)) +
scale_y_continuous(name="Pro State <--- Mood ---> Pro Market"
, breaks=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1)
, labels=c(-2.5,-2,-1.5,-1,-0.5,0,0.5,1))
# dev.off()
fit.l <- lm (q50 ~ as.factor(survey.year), data=Legislator.Moods)
fit.s <- lm (q50 ~ as.factor(survey.year), data=Senator.Moods)
fit.p <- lm (q50 ~ as.factor(survey.year), data=President.Moods)
anova (fit.l)
round (anova(fit.l)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.l)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
anova (fit.s)
round (anova(fit.s)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.s)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
anova (fit.p)
round (anova(fit.p)["Residuals", "Mean Sq"], 2) # within-year variance
round (anova(fit.p)["as.factor(survey.year)", "Mean Sq"], 2) # between-year variance
# Least patterned time series
